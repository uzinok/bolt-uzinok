extends ../../../templates/template.pug

block variables
	//- переменная для template.pug
	include var.pug

block main
	section
		.container
			h2 Вступление.

			p Всем привет! Относительно недавно я захотел один из проектов выложить на GitHub Pages. Сначала пошел на ютуб, потом несколько статей прочел, не найдя нужного начал изучать сам гитхаб. Нашел два способа для реализации этого желания.
			p Первый способ – быстрый, но с одним минусом: в репозитории остаётся сама сборка. Но она имеет место быть в том случае если простая верстка без сборщика: то есть в самом репозитории есть готовый html, css и прочие файлы.
			p Второй способ подходит если у вас какой-то сборщик, в моём случае будет галп. Найдя второй способ, не стал сразу записывать видео так как не был уверен что всё ок. Но недавно у коллеги увидел статью с этим способом и решил вам показать его.

	section
		.container
			h2 Начну с более простого/быстрого способа.

			p Сейчас не буду описывать как создать новый репозиторий "test-deploy" (есть в <a href="#video">видео</a>), но создавая его обязательно проследите что-бы он был публичным.
			p Когда в репозитории есть готовая вёрстка - можно приступать к работе для этого необходимо зайти в настройки и выбрать вкладку <i>page</i>. В <i>source</i> выбираем <i>GitHub Actions</i>. Далее Static HTML, комитим новый файл и всё. <small>(Далее поясню)</small>

			figure
				picture
					source(srcset="img/article/deploy/deploy-1.avif", type="image/avif")
					source(srcset="img/article/deploy/deploy-1.webp", type="image/webp")
					img(src="img/article/deploy/deploy-1.png", alt="скрин со страници настроек репозитория github с подсказками")
				figcaption Скрин с подсказками

			p Если перейдем во вкладку екшен то увидим процесс деплоя, а вернувшись в настройки гитхаб пагес, увидим ссылку на наш проект. Правда иногда нужно немного подождать, буквально пару минут до появления этой ссылки.

			figure
				picture
					source(srcset="img/article/deploy/deploy-2.avif", type="image/avif")
					source(srcset="img/article/deploy/deploy-2.webp", type="image/webp")
					img(src="img/article/deploy/deploy-2.png", alt="скриншот процесса деплойя")
				picture
					source(srcset="img/article/deploy/deploy-3.avif", type="image/avif")
					source(srcset="img/article/deploy/deploy-3.webp", type="image/webp")
					img(src="img/article/deploy/deploy-3.png", alt="скриншот расположения ссылки на опубликованный сайт")
				figcaption Деплой и расположение ссылки на опубликованный сайт

			p В интерфейсе кода проекта есть шестерёнка, которая позволит сделать кое-что интересное: закрепить ссылку на сборку. При этом даже не нужно её копировать отметив галочку <i>Use your GitHub Pages website</i> Сохранив настройки под этой шестерёнкой появится ссылка на опубликованный сайт.

			figure
				picture
					source(srcset="img/article/deploy/deploy-4.avif", type="image/avif")
					source(srcset="img/article/deploy/deploy-4.webp", type="image/webp")
					img(src="img/article/deploy/deploy-4.png", alt="скрин со страници настроек репозитория github с подсказками")
				figcaption Скрин с подсказками

			p Теперь у нас всё работает и при каждом пуше с изменениями будет происходить деплй и сайт будет обновляться.

	section
		.container
			h2 Как это работает?

			p Прежде чем приступить к следующему пункту, стоит сказать пару слов по файлу <i>static.yml</i> так как похожий файл будем использовать далее.

			+codeBlock('YML', "# Simple workflow for deploying static content to GitHub Pages\nname: Deploy static content to Pages\n\non:\n  # Runs on pushes targeting the default branch\n  push:\n    branches: [\"main\"]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\n# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.\n# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: false\n\njobs:\n  # Single deploy job since we're just deploying\n  deploy:\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Pages\n        uses: actions/configure-pages@v3\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v1\n        with:\n          # Upload entire repository\n          path: '.'\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2")

			p Не буду вдаваться в подробности, но вкратце это работает так:
			ul
				li 2я строка - название экшена
				li 4я-7я выполнение экшена при пуше в ветку <i>"main"</i>, её можно заменить на вашу
				li 10я строка позволяет запустить деплой вручную
				li 13я-22я строки это настройки
				li на 24ой строке начинается работа, а на 25ой название работы
				li 27я-30я строки это настройки
				li с 31ой строки начинаются действия выполнения работы

			p На строке 40 есть интересная настройка: <code>path: '.'</code>. На тот случай если в репозитории несколько папок, можно указать ту из которой необходимо получить файлы для деплоя.


	section
		.container
			h2 Деплой сборки.



			//- +codeBlock('', '')
