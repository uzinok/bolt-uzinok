extends ../../../templates/template.pug

block variables
	//- переменная для template.pug
	include var.pug

block main

	section
		.container
			h2.visually-hidden Вступление
			p Браузерные чекбоксы и&nbsp;радиокнопки в&nbsp;разных браузерах могут выглядеть по-разному. Кроме того, внешний вид этих элементов практически всегда выбивается из&nbsp;стиля сайта. А&nbsp;как их&nbsp;стилизовать? Как у&nbsp;чекбокса поменять рамку с&nbsp;галочкой, а&nbsp;радиокнопку сделать квадратной?
			p Я&nbsp;вам покажу два способа. Первый способ самый удобный, но&nbsp;необходимо его использовать с&nbsp;аккуратностью, так как могут быть проблемы с&nbsp;кроссбраузерностью. Он&nbsp;основывается на&nbsp;#[code appearance: none;]. Это свойство достаточно хорошо поддерживается, но&nbsp;для моей работы он&nbsp;всё-таки не&nbsp;подходит, так как мы&nbsp;работаем для множества стран, и&nbsp;не&nbsp;везде всё так хорошо с&nbsp;вебом как у&nbsp;нас. Второй способ более кроссбраузерный, но&nbsp;менее удобный. Есть ещё один способ&nbsp;&mdash; о&nbsp;нём кратко в&nbsp;конце.
	section
		.container
			h2 Самый простой способ кастомизации.
			p Самый простой, и&nbsp;при этом более надёжный способ, у&nbsp;которого могут быть проблемы с&nbsp;кроссбраузерностью если нужна поддержка очень старых браузеров.
			p Начну с&nbsp;HTML разметки и&nbsp;не&nbsp;забываю про семантику:
			+codeBlock('html', `<label class="label">
  <input type="checkbox" class="checkbox" name="name" checked>
  Кнопка 1
</label>
<label class="label">
  <input type="checkbox" class="checkbox" name="name">
  Кнопка 2
</label>
<label class="label">
  <input type="checkbox" class="checkbox" name="name" disabled>
  Кнопка 3
</label>

<label class="label">
  <input type="radio" class="radio" name="name" checked>
  Кнопка 4
</label>
<label class="label">
  <input type="radio" class="radio" name="name">
  Кнопка 5
</label>
<label class="label">
  <input type="radio" class="radio" name="name" disabled>
  Кнопка 6
</label>`)
			h3 Основные стили.
			p Первым делом отключаю браузерные стили и&nbsp;сразу прописываю правила для стилизации кнопок в&nbsp;спокойном состоянии. Для этого возьму готовые картинки из&nbsp;одного учебного проекта.
			+codeBlock('css', `.radio,
.checkbox {
  appearance: none;
  display: inline-block;
  margin: 0;
  width: 16px;
  height: 16px;
  background-image: url(./img/input.svg);
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  vertical-align: baseline;
}`)
			p Что тут происходит?
			ul
				li Правила прописываю сразу и&nbsp;для чекбоксов и&nbsp;для радиокнопок
				li #[code appearance: none;] отключает все браузерные стили, после этого свойства #[code input] совсем не&nbsp;будет видно
				li #[code display: inline-block;] добавляю чтобы можно было задать размеры
				li #[code margin: 0;] сбрасывает браузерные отступы
				li #[code vertical-align: baseline;] выравнивает кнопку в&nbsp;строке, возможно вам это не&nbsp;нужно
				li Остальные правила добавляют фоновую&nbsp;&mdash; картинку рамку для кнопок
			h3 Отмечаем выбранные кнопки.
			p У&nbsp;чекбоксов достаточно поменять фоновую картинку, а&nbsp;у&nbsp;радиокнопок точку добавлю другим способом&nbsp;&mdash; псевдоэлемент создам.
			+codeBlock('css', `.checkbox:checked {
  background-image: url(./img/input-checked.svg);
}

.radio:checked::before {
  content: '';
  display: block;
  width: 6px;
  height: 6px;
  background-color: #2D3440;
  border-radius: 2px;
  margin: 5px;
}`)
			p Чекбоксы комментировать не&nbsp;вижу смысла, а&nbsp;про радиокнопки немного расскажу:
			ul
				li Когда отмечена кнопка&nbsp;&mdash; создаю псевдоэлемент
				li #[code content: '';] обязательное свойство для псевдоэлемента
				li #[code display: block;] для размеров и&nbsp;отступов
				li #[code border-radius: 2px;] слегка закруглят углы
				li Остальное и&nbsp;так понятно))
			h3 Стилизация событий кнопок.
			p Фокус стилизовать не&nbsp;буду&nbsp;&mdash; есть браузерный оутлайн, а&nbsp;остальное, в&nbsp;том числе #[code :disabled]&nbsp;&mdash; необходимо.
			+codeBlock('css', `.radio:hover,
.checkbox:hover {
  opacity: 0.8;
}

.radio:active,
.checkbox:active {
  opacity: 0.6;
}`)
			p К&nbsp;сожалению такой подход не&nbsp;позволяет менять цвет кнопок, но&nbsp;на&nbsp;следующем примере я&nbsp;покажу как это можно сделать и&nbsp;ещё добавить анимацию.
			p Что мы&nbsp;получили? Две кнопки доступные с&nbsp;клавиатуры, с&nbsp;эффектами состояний для всех событий. А&nbsp;скомбинировав этот и&nbsp;следующий способ можно будет использовать красивые &laquo;плюшки&raquo;.
	section
		.container
			h2 Радиокнопки и&nbsp;чекбоксы на&nbsp;#[code span].
			p Разметка практически такая&nbsp;же как и&nbsp;у&nbsp;первого варианта, но&nbsp;после каждой кнопки добавляется #[code span] для визуализации кнопки и&nbsp;класс #[code .visually-hidden] для доступного cкрытия кнопок. Он&nbsp;необходим для того, что&nbsp;бы пользователь мог попасть клавишей TAB по&nbsp;нашей кнопке и&nbsp;взаимодействовать с&nbsp;ней. Стили этого класса прописаны так, что&nbsp;бы его не&nbsp;было визуально видно, но&nbsp;при этом пользователям клавиатуры и&nbsp;программ чтения с&nbsp;экрана был виден элемент.
			+codeBlock('css', `.visually-hidden {
  position: absolute;
  width: 0;
  height: 0;
  margin: 0;
  padding: 0;
  overflow: hidden;
  border: none;
}`)
			+codeBlock('html', `<label class="label">
  <input type="checkbox" class="checkbox visually-hidden" name="name" checked>
  <span class="checkbox-view"></span>
  Кнопка 1
</label>
<label class="label">
  <input type="checkbox" class="checkbox visually-hidden" name="name">
  <span class="checkbox-view"></span>
  Кнопка 2
</label>
<label class="label">
  <input type="checkbox" class="checkbox visually-hidden" name="name" disabled>
  <span class="checkbox-view"></span>
  Кнопка 3
</label>

<label class="label">
  <input type="radio" class="radio visually-hidden" name="name" checked>
  <span class="radio-view"></span>
  Кнопка 4
</label>
<label class="label">
  <input type="radio" class="radio visually-hidden" name="name">
  <span class="radio-view"></span>
  Кнопка 5
</label>
<label class="label">
  <input type="radio" class="radio visually-hidden" name="name" disabled>
  <span class="radio-view"></span>
  Кнопка 6
</label>`)
			h3 Основные стили кнопок на&nbsp;#[code span].
			p Так как я&nbsp;хочу анимировать цвет кнопок, и&nbsp;мне нужна обводка при фокусе, сам #[code span] не&nbsp;будет иметь никакого внешнего вида&nbsp;&mdash; визуализировать будут его псевдоэлементы. Для этого #[code span] необходимо подготовить:
			+codeBlock('css', `.radio-view,
.checkbox-view {
  display: inline-block;
  width: 16px;
  height: 16px;
  vertical-align: baseline;
  position: relative;
  color: #2D3440;
}`)
			p Всё просто:
			ul
				li #[code display: inline-block;] для того чтобы можно было добавить размеры
				li #[code position: relative;] необходим чтобы отсчет координат выбитых из&nbsp;потока псевдоэлементов шел от&nbsp;#[code span]
				li #[code color: #2D3440;] необходим для более удобной смены цвета кнопок
				li Ну&nbsp;и&nbsp;размеры и&nbsp;выравнивание в&nbsp;строке
			p Теперь добавим рамку:
			+codeBlock('css', `.radio-view::before,
.checkbox-view::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  mask-image: url(./img/input.svg);
  -webkit-mask-image: url(./img/input.svg);
  mask-position: center;
  -webkit-mask-position: center;
  mask-repeat: no-repeat;
  -webkit-mask-repeat: no-repeat;
  mask-size: contain;
  -webkit-mask-size: contain;
  background-color: currentColor;
}`)
			p Получилось много всего, но&nbsp;это только на&nbsp;первый взгляд:
			ul
				li #[code content: '';] обязательное свойство для псевдоэлемента
				li #[code position: absolute;] и&nbsp;следующие два свойства&nbsp;&mdash; позиционируем внутри #[code span] псевдоэдементы
				li Ширина и&nbsp;высота&nbsp;&mdash; это понятно))
				li #[code background-color: currentColor;] что&nbsp;бы отображалась маска. Причём #[code currentColor] добавляет цвет текста. Если поменять значение свойства #[code color], то&nbsp;и&nbsp;этот фон поменяется.
				li Ну&nbsp;и&nbsp;#[span(style="text-decoration: line-through;") шесть] три свойства добавляет маску и&nbsp;настройки этой маски.
			p Теперь нужно отметить выбранные кнопки, но&nbsp;для анимации нужно немного доработать псевдоэлементы у&nbsp;#[code span]
			+codeBlock('css', `.checkbox-view::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  mask-image: url(./img/input-checked.svg);
  -webkit-mask-image: url(./img/input-checked.svg);
  mask-position: center;
  -webkit-mask-position: center;
  mask-repeat: no-repeat;
  -webkit-mask-repeat: no-repeat;
  mask-size: contain;
  -webkit-mask-size: contain;
  background-color: currentColor;
  opacity: 0;
}

.checkbox-view::after,
.checkbox-view::before {
  transition: opacity 0.25s ease-in-out;
}`)
			p По&nbsp;сути дела я&nbsp;создал псевдоэлемент #[code ::after] такой&nbsp;же как и #[code ::before], только добавил прозрачность. Ну&nbsp;и&nbsp;добавил анимацию прозрачности. Тут стоит добавить, что лучше указывать какие свойства нужно анимировать, и&nbsp;время анимации лучше не&nbsp;делать более чем 0.3 секунды.
			p Ну&nbsp;а&nbsp;добавить галочку можно так:
			+codeBlock('css', `.checkbox:checked+.checkbox-view::before {
  opacity: 0;
}

.checkbox:checked+.checkbox-view::after {
  opacity: 1;
}`)
			p С&nbsp;радио кнопками тоже нужна подготовка:
			+codeBlock('css', `.radio-view::after {
  content: '';
  display: block;
  width: 6px;
  height: 6px;
  background-color: currentColor;
  border-radius: 2px;
  margin: 5px;
  opacity: 0;
  transition: opacity 0.25s ease-in-out;
}`)
			p Стили почти как у&nbsp;псевдоэлемента радиокнопки в&nbsp;первом случае, только я&nbsp;заменил значение цвета фона, сделал псевдоэлемент полностью прозрачным и&nbsp;добавил анимацию прозрачности. По&nbsp;аналогии с&nbsp;чекбоксом ставим точку у&nbsp;выбранной радиокнопки:
			+codeBlock('css', `.radio:checked + .radio-view::after {
  opacity: 1;
}`)
			p Осталось добавить состояния событий интерактивного элемента. Есть оговорка)) Судя по&nbsp;поведению кнопок при наведении на&nbsp;#[code label] в&nbsp;первом случае, необходимо добавлять эффект наведения кнопкам при попадании курсора на&nbsp;#[code label] и сейчас.
			+codeBlock('css', `.label:hover .checkbox:not(:disabled):not(:active)+.checkbox-view,
.label:hover .radio:not(:disabled):not(:active)+.radio-view {
  color: blue;
}`)
			p Усложнение #[code :not(:disabled):not(:active)+] необходимо, что&nbsp;бы к&nbsp;отключенной кнопке и&nbsp;в&nbsp;состоянии [code :active] не&nbsp;применялись стили. Цвет меняется, но&nbsp;без анимации&nbsp;&mdash; поправим:
			+codeBlock('css', `.checkbox-view::before,
.checkbox-view::after,
.radio-view::before,
.radio-view::after {
  transition: opacity 0.25s ease-in-out, color 0.25s ease-in-out;
}`)
			p Ну&nbsp;и&nbsp;оставшееся:
			+codeBlock('css', `.checkbox:not(:disabled)+.checkbox-view:active,
.radio:not(:disabled)+.radio-view:active {
  color: red;
}

.checkbox:focus-visible+.checkbox-view,
.radio:focus-visible+.radio-view {
  outline: auto;
}

.checkbox:disabled+.checkbox-view,
.radio:disabled+.radio-view {
  opacity: 0.4;
}`)
	section
		.container
			h2 Итоги.
			p Я&nbsp;не&nbsp;стал показывать третий вариант: то&nbsp;же самое что и&nbsp;со&nbsp;#[code span], но&nbsp;без него. Если вам первые два варианта не&nbsp;подходят&nbsp;&mdash; можете немного модифицировать второй. А&nbsp;этих двух хватает для большинства случаев.






			//- +codeBlock('', ``)
